---
health_status_notify: &health_status_notify
  put: health-notification

docker_hub_creds: &docker_hub_creds
  username: ((docker_hub_username))
  password: ((docker_hub_password))

resources:
  - name: security-advisory-dashboard-git
    icon: github-circle
    type: git
    source:
      uri: https://github.com/alphagov/cyber-security-security-advisory-dashboard
      branch: master

  - name: health-notification
    type: http-api
    source:
        uri: https://((health_host_prod))/?alert_type=concourse$&alert_name=health
        method: POST
        headers:
          Authorization: "Bearer ((health_token_prod))"
        json:
          service: "{service}"
          state: "{health}"
          message: "{message}"
          pipeline: "{BUILD_PIPELINE_NAME}"
          job: "{BUILD_JOB_NAME}"
          build_number: "{BUILD_NAME}"
        service: "security-advisory-dashboard"

  - name: concourse_base_image
    type: docker-image
    source:
      repository: gdscyber/cyber-security-concourse-base-image
      <<: *docker_hub_creds

  - name: cyber-security-infrastructure
    icon: github-circle
    type: git
    source:
      uri: git@github.com:alphagov/cyber-security-terraform.git
      branch: master
      private_key: ((deploy_key))
      paths:
        - service/github_audit/account/779799343306/apply.tfvars
        - service/github_audit/account/779799343306/backend.tfvars

  - name: every-weekday-resource
    type: time
    icon: clock-outline
    source:
      start: 10:00 AM
      stop: 4:00 PM
      location: Europe/London
      interval: 24h
      days: [Monday, Tuesday, Wednesday, Thursday, Friday]

resource_types:
  - name: http-api
    type: docker-image
    source:
      repository: gdscyber/http-api-resource
      tag: 1.0a
      <<: *docker_hub_creds

blocks:
  - &every-weekday
    get: every-weekday-resource
    trigger: true

  - &security-advisory-dashboard-git
    get: security-advisory-dashboard-git
    trigger: true

  - &concourse_base_image
    get: concourse_base_image
    trigger: true

  - config: &audit_lambda_build
      params:
        TOKEN: faketoken
        GITHUB_ORG: fakeorg

      platform: linux

      image_resource:
        type: docker-image
        source:
          repository: gdscyber/cyber-security-concourse-base-image
          <<: *docker_hub_creds

      inputs:
        - name: security-advisory-dashboard-git

jobs:
  - name: sec_adv_tests
    plan:
      - *security-advisory-dashboard-git
      - *concourse_base_image
      - task: test
        config:
          <<: *audit_lambda_build
          run:
            path: /bin/bash
            args:
              - -c
              - |
                pip install -r requirements-dev.txt
                export PYTHONDONTWRITEBYTECODE=1
                ./test.sh tests
            dir: security-advisory-dashboard-git
          params:
            FLASK_ENV: development
            GITHUB_ORG: fakeorg
            TOKEN: faketoken
        on_success:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard tests completed successfully."
            health: healthy
        on_failure:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard tests failed."
            health: unhealthy

  - name: github_contract_tests
    plan:
      - *security-advisory-dashboard-git
      - *concourse_base_image
      - *every-weekday
      - task: contract_test
        config:
          <<: *audit_lambda_build
          run:
            path: /bin/bash
            args:
              - -c
              - |
                source /usr/local/bin/sts-assume-role.sh 'arn:aws:iam::779799343306:role/github_contract_tests_role' 'eu-west-2'
                export FLASK_ENV="production"
                pip install -r requirements-dev.txt
                export PYTHONDONTWRITEBYTECODE=1
                ./test.sh contract_tests
            dir: security-advisory-dashboard-git
        on_success:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard contract tests completed successfully."
            health: healthy
        on_failure:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard contract tests failed."
            health: unhealthy

  - name: sec_adv_pack
    # Needs to create zip and output to s3
    plan:
      - *security-advisory-dashboard-git
      - *concourse_base_image
      - task: pack
        config:
          <<: *audit_lambda_build
          run:
            path: /bin/bash
            args:
              - -c
              - bash pack.sh
            dir: security-advisory-dashboard-git
        on_success:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard zip completed successfully."
            health: healthy
        on_failure:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard zip failed."
            health: unhealthy


  - name: terraform_deploy
    # Needs to read in from s3
    plan:

      - get: security-advisory-dashboard-git
        trigger: true
        passed:
          - sec_adv_pack
          - sec_adv_tests

      - &sec_adv_docker
        get: concourse_base_image
        trigger: true
        passed:
          - sec_adv_tests

      - get: cyber-security-infrastructure
        trigger: true

      - task: deploy
        config:
          <<: *audit_lambda_build
          params:
            AWS_REGION: eu-west-2


          inputs:
            - name: security-advisory-dashboard-git
            - name: cyber-security-infrastructure

          run:
            path: bash
            args:
            - -c
            - |
              cp cyber-security-infrastructure/service/github_audit/account/779799343306/apply.tfvars   security-advisory-dashboard-git/build/terraform/terraform.tfvars
              cp cyber-security-infrastructure/service/github_audit/account/779799343306/backend.tfvars security-advisory-dashboard-git/build/terraform/backend.tf
              cat cyber-security-infrastructure/service/github_audit/account/779799343306/backend.tfvars security-advisory-dashboard-git/build/terraform/backend.tf
              cd security-advisory-dashboard-git
              ./pack.sh
              cd build/terraform
              source /usr/local/bin/sts-assume-role.sh 'arn:aws:iam::779799343306:role/github-advisories-concourse-role' 'eu-west-2'
              terraform init
              terraform apply --auto-approve
        on_success:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard deploy completed successfully."
            health: healthy
        on_failure:
          <<: *health_status_notify
          params:
            message: "Cyber security dashboard deploy failed."
            health: unhealthy
